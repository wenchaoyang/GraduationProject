#include <iom16v.h> 
#include <macros.h> 

#define OC0_OUT_EN DDRB |= 0b00001000
#define OC2_OUT_EN DDRD |= 0b10000000
#define OC0_ON TCCR0 = 0B01101001 
#define OC2_ON TCCR2 = 0B01101001
#define OC0_OFF TCCR0 = 0B00000000
#define OC2_OFF TCCR2 = 0B00000000
#define OC1A_OFF DDRD &= 0B11011111
#define OC1B_OFF DDRD &= 0B11101111
#define OC1A_ON DDRD |= 0B00100000
#define OC1B_ON DDRD |= 0B00010000

unsigned char str[5];
unsigned char old_dir,oldv,getp,usart_ok;
//*********发送一个字符************//
void put_c(unsigned char c) 
{
	while( !(UCSRA & (1<<UDRE)) );
	UDR=c;
}
//*********发送一串字符************//
void put_s(unsigned char *ptr)
{
	while (*ptr)
	{
		put_c(*ptr++);
	}
	put_c(0x0D);	  //换行
	//put_c(0x0A);  //回车
}
//*********USART 初始化************//
void USART_init(void)
{
 	UCSRB = 0x00;   //disable while setting baud rate
    //USART 9600 8, n,1  超级终端等也要设成同样的设置才能通讯
    UCSRC = (1<<URSEL) | 0x06;
    //异步，8位数据，无奇偶校验，一个停止位，无倍速  
    UBRRL= 103;//(F_CPU/BAUDRATE/16-1)%256;//=12即9600波特率
    UBRRH= 0x00;//(F_CPU/BAUDRATE/16-1)/256;
    UCSRA = 0x02;//0x00;正常异步方式
    UCSRB = 0x98;   //接收中断允许，接收缓冲自动清空，接收允许
    
}
/*
void INT0_init()
{
 DDRD&=~(1<<DDD2);
 PORTD|=(1<<PD2);
 SREG=0x80;                      /*使能全局中断*/
 //MCUCR&=~((1<<ISC01)|(1<<ISC00));  /*低电平触发中断*/
 //GICR=(1<<INT0);                 /*使能外部中断0请求*/
 //}
//*********PWM功能定时器的初始化************//
void timer_init(void) 
{ 
 
 OC0_OUT_EN;
 OC2_OUT_EN;
 OC0_OFF;
 OC2_OFF;
 OC1A_OFF;
 OC1B_OFF;
 //SREG=0x80;         //使能全局中断
// TIMSK=(1<<OCIE1A); //使能比较匹配中断
 TCCR1A=0B10100001; //快速PWM模式，无分频，比较匹配时置零，TOP时置1
 TCCR1B=0B00001001;
}
 //*********毫秒延时************//
void delay(int time)
{
 int i;
 for(;time>0;time--)
  for(i=0;i<100;i++);
}
//**对接收到的字符（放str[]数组）甄别转化为百分比**//
//**str[]收到的字符以a、b、l、r开头，#结束，中间存放速度百分比**//
unsigned char Judge_s(void)
{
  unsigned char j,m;
  j=0;
  if(str[3]=='#')
  {
    if(str[1]>='0'&&str[1]<='9'&&str[2]>='0'&&str[2]<='9')
	{
	  j=(str[1]-48)*10+str[2]-48;
	  put_c(j);
	}
	else  put_s("error percent");
  }
  else  put_s("error end");
  m=100-j;
  return(m);
}
//*********根据接收到的信息执行具体输出************//
void Implement(unsigned char k)
{
  
  switch(str[0])
  {
    case 'a': 
			  softrealize('a',k);
			  old_dir='a';
			  oldv=k;
		 	  break;
	case 'b': softrealize('b',k);
		 	  old_dir='b';
			  oldv=k;
			  //OCR1A=k;
			  //OCR1B=k;
		 	  break;
	case 'l': softrealize('l',k);
		 	  old_dir='l';
			  oldv=k;
			  //OCR1B=k;
			  //OCR2=k;
		 	  break;
	case 'r': softrealize('r',k);
		 	  old_dir='r';
			  oldv=k;
			  //OCR0=k;
			  //OCR1A=k;
		 	  break;
	case 'L': if(old_dir='a')
			  {
			   OCR0=k;
			  }
		 	  break;
	case 'R': if(old_dir='a')
			  {
			   OCR2=k;
			  }
		 	  break;
	default : OC1A_ON;  //Stop
 		 	  OC1B_ON;
 			  PORTD &=0X11001111;
 			  delay(100);
			  OC1A_OFF;  
		 	  OC1B_OFF;
			  OC0_OFF;
			  OC2_OFF;
			  PORTB |=0X08;
 			  PORTD |=0X80;
			  old_dir='s';
			  oldv=50;
			  put_s("STOP");
  }
}
//////////////////执行软实现函数////////////////////
void softrealize(unsigned char dir,unsigned char v)
{
 unsigned char i;
 char t=10;
 if(dir==old_dir)
 {
  switch(dir)
  {
   case 'a':  OCR0=v; 
			  OCR2=v+t; 
			  delay(20);   		   
			  if(v<5)  //如果前进速度给到95以上，就不用PWM功能，直接IO口驱动
			  {
			   OC0_OFF;
			   OC2_OFF;
			   PORTB &=0Xf7;
			   PORTD &=0X7f;
			  }
   			  break;
   case 'b': OCR1A=v+t; 
   			 OCR1B=v; 
			 delay(20); 	   		   
 			 break;
   case 'l': OCR1B=v; 
   			 OCR2=v+t; 
			 delay(20); 		   		   
   			 break;
   case 'r': OCR1A=v+t; 
   			 OCR0=v; 
			 delay(20); 		   		   
	 		 break;
   default : OC1A_ON;  //Stop
 		 	 OC1B_ON;
 			 PORTD &=0X11001111;
 			 delay(100);
			 OC1A_OFF;  
		 	 OC1B_OFF;
			 OC0_OFF;
			 OC2_OFF;
			 PORTB |=0X08;
 			 PORTD |=0X80;
			  //put_s("STOP");
  }
 }
 else   //方向改变了，先按照原方向减小速度到0；再按指定方向缓慢启动
 {
  if(oldv<25)
  {
   switch(old_dir)
   {
   case 'a':OC0_ON;
			OC2_ON;
   			for(i=oldv;i<=45;i+=5)
			  {
			   if(usart_ok==1) { break; }
			   else
			   { OCR0=i; OCR2=i+t; delay(120); }		   		   
			  }
   			break;
   case 'b':for(i=oldv;i<=45;i+=5)
			  {
			   if(usart_ok==1) { break; }
			   else
			   { OCR1A=i+t; OCR1B=i; delay(120); }		   		   
			  }
   			break;
   case 'l':for(i=oldv;i<=45;i+=5)
			  {
			   if(usart_ok==1) { break; }
			   else
			   { OCR1B=i; OCR2=i+t; delay(120); }		   		   
			  }
   			break;
   case 'r':for(i=oldv;i<=45;i+=5)
			  {
			   if(usart_ok==1) { break; }
			   else
			   { OCR1A=i+t; OCR0=i; delay(120); }		   		   
			  }
   			break;
   default : ;
   }
  }
   /*OC1A_ON;  //先Stop，再改变方向
 	 OC1B_ON;
 	 PORTD &=0X11001111;
 	 delay(30);
	 OC1A_OFF;  
	 OC1B_OFF;
	 OC0_OFF;
	 OC2_OFF;
	 PORTB |=0X08;
 	 PORTD |=0X80; */
	//put_s("STOP");
   switch(dir)
   {
   	case 'a': OC1A_ON;   //前进ahead
 		 	  OC1B_ON;
 			  PORTD &=0X11001111;
 			  delay(10);
		 	  OC1A_OFF;  
		 	  OC1B_OFF;
			  OC0_ON;
			  OC2_ON;
			  for(i=70;i>=v;i-=5)
			  {
			   if(usart_ok==1) { break; }
			   else
			   { OCR0=i; OCR2=i+t; delay(120); }	
			  }
			  if(v<5)  //如果前进速度给到95以上，就不用PWM功能，直接IO口驱动
			  {
			   OC0_OFF;
			   OC2_OFF;
			   PORTB &=0Xf7;
			   PORTD &=0X7f;
			  }
		 	  break;
	case 'b': OC1A_ON;   //后退back
		 	  OC1B_ON;
			  OC0_OFF;
			  OC2_OFF;
			  PORTB |=0X08;
			  PORTD |=0X80;
			  for(i=70;i>=v;i-=5)
			  {
			   if(usart_ok==1) { break; }
			   else
			   { OCR1A=i+t; OCR1B=i; delay(120); }	
			  }
			  break;
	case 'l': OC1B_ON;   //左转left
		 	  OC1A_ON;
 			  PORTD &=0X11001111;
 			  delay(100);
		 	  OC1A_OFF;
			  OC0_OFF;
			  PORTB |=0X08;
			  OC2_ON;
			  OCR1B=i; 
			  OCR2=i+t; 
			  delay(20); 
			  break;
	case 'r': OC1A_ON;    //右转right
 		 	  OC1B_ON;
 			  PORTD &=0X11001111;
 			  delay(100);
		 	  OC1B_OFF;
			  OC2_OFF;
			  PORTD |=0X80;
			  OC0_ON;
			  OCR1A=i+t; 
			  OCR0=i; 
			  delay(80); 	
			  break;
	default: OC1A_ON;  //先Stop，再改变方向
 	 		 OC1B_ON;
 	 		 PORTD &=0X11001111;
 	 		 delay(30);
	 		 OC1A_OFF;  
	 		 OC1B_OFF;
	 		 OC0_OFF;
	 		 OC2_OFF;
	 		 PORTB |=0X08;
 	 		 PORTD |=0X80; 
   }
 }
}
//////////////////主函数////////////////////////////
void main(void) 
{
 unsigned char percent;
 old_dir='s';
 oldv=50;
 usart_ok=0;
 getp=0;
 USART_init();
 timer_init();
 //INT0_init();
 SEI(); 
 DDRA=0XFF;
 PORTA=0X00;
 //初始状态准确关闭所有PWM
 OC1A_ON;
 OC1B_ON;
 PORTD &=0X11001111;
 delay(100);
 OC1A_OFF;
 OC1B_OFF;
 OC0_OFF;
 OC2_OFF;
 PORTB |=0X08;
 PORTD |=0X80;
 delay(100);
 usart_ok=0;
 
 while(1)
 {
  if(usart_ok==1)
  {
   usart_ok=0;
   percent=Judge_s();//命令甄别
   Implement(percent);//输出驱动执行
   //put_s(str);
  }
  delay(10);
 }
}
/////////////////////中断接收数据//////////////
#pragma interrupt_handler uart0_rx_isr:12
void uart0_rx_isr(void)
{
 	 str[getp]=UDR;
	 if(str[getp]=='#' || getp>4)
	 {
	  getp=0;
	  usart_ok=1;
	  PORTA=~PINA;
	 }
	 else getp++;
	
}
/*
#pragma interrupt_handler int0:2 
void int0()
{
   OC1A_ON;
   OC1B_ON;
   PORTD &=0X11001111;
   delay(100);
   OC1A_OFF;
   OC1B_OFF;
   OC0_OFF;
   OC2_OFF;
   PORTB |=0X08;
   PORTD |=0X80;
   while(PIND &0X04==0) delay(20);
   PORTD|=(1<<PD2);
   //usart_ok=1;
}
*/